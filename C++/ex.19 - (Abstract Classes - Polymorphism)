#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <set>
#include <cassert>
using namespace std;

struct Node{
   Node* next;
   Node* prev;
   int value;
   int key;
   Node(Node* p, Node* n, int k, int val):prev(p),next(n),key(k),value(val){};
   Node(int k, int val):prev(NULL),next(NULL),key(k),value(val){};
};

class Cache{
   
   protected: 
   map<int,Node*> mp; //map the key to the node in the linked list
   int cp;  //capacity
   Node* tail; // double linked list tail pointer
   Node* head; // double linked list head pointer
   virtual void set(int, int) = 0; //set function
   virtual int get(int) = 0; //get function

};
class LRUCache : public Cache{
    public:
    map<int, Node*> mp;
    LRUCache(int t){
        cp = t;
        head = nullptr;
        tail = nullptr;
    }
    
    void excluir(Node* no){
        if (no->prev != nullptr)
        no->prev->next = no->next;
    else
        head = no->next;

    if (no->next != nullptr)
        no->next->prev = no->prev;
    else
        tail = no->prev;
    }
    
    void inicio(Node* no){
        no->next = head;
    no->prev = nullptr;

    if (head != nullptr)
        head->prev = no;

    head = no;

    if (tail == nullptr)
        tail = no;
    }
    
    void mudainicio(Node* no) {
    excluir(no);
    inicio(no);
}
    
    virtual void set(int a,int b) override {
        if (mp.find(a) != mp.end()) {
        Node* no = mp[a];
        no->value = b;
        mudainicio(no);
    } else {
        if (mp.size() >= cp) {
            mp.erase(tail->key);
            excluir(tail);
            delete tail; 
        }

        Node* nvno = new Node(a, b);
        inicio(nvno);
        mp[a] = nvno;
    }
    }
    
    virtual int get(int f) override{
        if (mp.find(f) == mp.end())
        return -1;

    Node* no = mp[f];
    mudainicio(no);
    return no->value;
        }
        
        
};
int main() {
   int n, capacity,i;
   cin >> n >> capacity;
   LRUCache l(capacity);
   for(i=0;i<n;i++) {
      string command;
      cin >> command;
      if(command == "get") {
         int key;
         cin >> key;
         cout << l.get(key) << endl;
      } 
      else if(command == "set") {
         int key, value;
         cin >> key >> value;
         l.set(key,value);
      }
   }
   return 0;
}
